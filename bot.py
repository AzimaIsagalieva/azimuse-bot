import logging
import json
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤
with open("azimuse_auto_replies.json", "r", encoding="utf-8") as file:
    auto_replies = json.load(file)

# –•—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
user_language = {}

# /start ‚Äî –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¨üáß English"]]
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AZIMUSE!\nWelcome to AZIMUSE!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please choose a language:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    )

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    text = update.message.text

    # 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–Ω
    if chat_id not in user_language:
        if "–†—É—Å—Å–∫–∏–π" in text:
            user_language[chat_id] = "RU"
        elif "English" in text:
            user_language[chat_id] = "EN"
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return

        lang = user_language[chat_id]
        questions = [KeyboardButton(q["question"]) for q in auto_replies[lang]]
        questions.append(KeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"))
        questions.append(KeyboardButton("‚ùì –î—Ä—É–≥–æ–µ / Contact manufacturer"))

        reply_markup = ReplyKeyboardMarkup(
            [[q] for q in questions],
            resize_keyboard=True
        )

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å / Please choose a question:",
            reply_markup=reply_markup
        )
        return

    # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    lang = user_language[chat_id]

    # –ù–∞–∂–∞–ª–∏ "–î—Ä—É–≥–æ–µ"
    if text == "‚ùì –î—Ä—É–≥–æ–µ / Contact manufacturer":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è." if lang == "RU"
            else "Please describe your question. We will get back to you soon."
        )
        context.user_data["awaiting_question"] = True
        return

    # –ù–∞–∂–∞–ª–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
    if text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —É—á—Ç–µ–º!" if lang == "RU"
            else "Please write your review. We will definitely take it into account!"
        )
        context.user_data["awaiting_review"] = True
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è-–æ—Ç–∑—ã–≤–∞
    if context.user_data.get("awaiting_review"):
        context.user_data["awaiting_review"] = False

        admin_message = f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{update.message.from_user.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}:\n\n{text}\nChat ID: {chat_id}"
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)

        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –µ–≥–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º." if lang == "RU"
            else "Thank you for your review! We will carefully consider it."
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º, –µ—Å–ª–∏ –æ–∂–∏–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å
    if context.user_data.get("awaiting_question"):
        context.user_data["awaiting_question"] = False

        admin_message = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{update.message.from_user.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}:\n\n{text}\nChat ID: {chat_id}"
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_message)

        await update.message.reply_text(
            "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è." if lang == "RU"
            else "Your question has been sent. We will contact you soon."
        )
        return

    # –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
    for item in auto_replies[lang]:
        if item["question"].lower() == text.lower():
            await update.message.reply_text(item["answer"])
            return

    # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
    await update.message.reply_text(
        "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î—Ä—É–≥–æ–µ / Contact manufacturer' –∏ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å." if lang == "RU"
        else "Answer not found. Please choose 'Other / Contact manufacturer' and describe your question."
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("ü§ñ AZIMUSE –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    app.run_polling()